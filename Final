package parking

fun main() {
    ParkingLotOperator().operate()
}

class ParkingLotOperator {

    private val listOfParkingLots = mutableListOf<ParkingLot>()

    fun operate() {
        while (true) {
            val input = readln().split(" ")
            if (input[0] == "exit") {
                break
            } else if (input[0] == "create") {
                if (input[1].toInt() > 0) {
                    val parkingLot = ParkingLot(input[1].toInt())
                    println("Created a parking lot with ${input[1].toInt()} spots.")
                    if (listOfParkingLots.isEmpty()) {
                        listOfParkingLots.add(parkingLot)
                    }
                    listOfParkingLots[0] = parkingLot
                } else {
                    println("You entered wrong spots number.")
                }
            } else if (listOfParkingLots.isNotEmpty()) {
                if (input[0] == "leave" && input.size == 2) {
                    listOfParkingLots[0].leaveCar(input[1].toInt())
                } else if (input[0] == "park" && input.size == 3) {
                    listOfParkingLots[0].parkCar(input[1], input[2])
                } else if (input[0] == "status" && input.size == 1) {
                    listOfParkingLots[0].printStatusOfSpots()
                } else if (input[0] == "reg_by_color" && input.size == 2) {
                    listOfParkingLots[0].regByColor(input[1])
                } else if (input[0] == "spot_by_color" && input.size == 2) {
                    listOfParkingLots[0].spotByColor(input[1])
                } else if (input[0] == "spot_by_reg" && input.size == 2) {
                    listOfParkingLots[0].spotByReg(input[1])
                }
            } else {
                println("Sorry, a parking lot has not been created.")
            }
        }
    }
}

class Car(
    val spotNum: Int = 0,
    val regNumber: String = "",
    val color: String = ""
) {
    override fun toString(): String {
        return "$spotNum $regNumber $color"
    }
}

class ParkingLot(private val numOfSpots: Int) {
    private val spot = Array<Boolean>(numOfSpots) { false }
    private val car = Array<Car>(numOfSpots) { Car() }

    fun parkCar(regNum: String, color: String) {
        if (spot.contains(false)) {
            val index = spot.indexOf(element = false)
            spot[index] = true
            car[index] = Car(index + 1, regNum, color)
            val spotNum = index + 1
            println("$color car parked in spot $spotNum.")
        } else {
            println("Sorry, the parking lot is full.")
        }
    }

    fun leaveCar(spotNum: Int) {
        try {
            val index = spotNum - 1
            if (spot[index]) {
                println("Spot $spotNum is free.")
                car[index] = Car(0,"","")
                spot[index] = false
            } else {
                println("There is no car in spot $spotNum.")
            }
        } catch (e: Exception) {
            println("There is no spot with such number.")
        }
    }

    fun printStatusOfSpots() {
        if (spot.contains(true)) {
            for (i  in spot.indices) {
                if (spot[i]) println(car[i])
            }
        } else {
            println("Parking lot is empty.")
        }
    }

    fun regByColor(color: String) {
        if (spot.contains(true)) {
            val list = mutableListOf<String>()
            for (item in car) {
                if (item.color.lowercase() == color.lowercase()) {
                    list.add(item.regNumber)
                }
            }
            if (list.isNotEmpty()) {
                println(list.joinToString())
            } else {
                println("No cars with color $color were found.")
            }
        } else {
            println("No cars with color $color were found.")
        }
    }

    fun spotByColor(color: String) {
        if (spot.contains(true)) {
            val list = mutableListOf<Int>()
            for (item in car) {
                if (item.color.lowercase() == color.lowercase()) {
                    list.add(item.spotNum)
                }
            }
            if (list.isNotEmpty()) {
                println(list.joinToString())
            } else {
                println("No cars with color $color were found.")
            }
        } else {
            println("No cars with color $color were found.")
        }
    }

    fun spotByReg(reg: String): Int {
        var spotNumber = 0
        for (item in car) {
            if (item.regNumber == reg) {
                spotNumber = item.spotNum
            }
        }
        if (spotNumber != 0) {
            println(spotNumber)
        } else {
            println("No cars with registration number $reg were found.")
        }
        return spotNumber
    }

}
